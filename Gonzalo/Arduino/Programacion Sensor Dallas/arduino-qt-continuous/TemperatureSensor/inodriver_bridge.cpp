//// ****** THIS FILE IS AUTOGENERATED ******
////
////          >>>> DO NOT CHANGE <<<<
////
/// 
///  Filename; F:\gonzalo andreu\INTI\Gonzalo\Arduino\Programacion Sensor Dallas\arduino-qt-continuous\drivers.py
///  Source class: TemperatureSensor
///  Generation timestamp: 2019-06-14T14:52:01.613570
///  Class code hash: db38f0a9c31023182ad24ccb107051ce64912160
///
/////////////////////////////////////////////////////////////


#include "inodriver_bridge.h"

SerialCommand sCmd;

void ok() {
  Serial.println("OK");
}

void error(const char* msg) {
  Serial.print("ERROR: ");
  Serial.println(msg);
}

void error_i(int errno) {
  Serial.print("ERROR: ");
  Serial.println(errno);
}

void bridge_loop() {
  while (Serial.available() > 0) {
    sCmd.readSerial();
  }
}

void bridge_setup() {
  //// Setup callbacks for SerialCommand commands

  // All commands might return
  //    ERROR: <error message>

  // All set commands return 
  //    OK 
  // if the operation is successfull

  // All parameters are ascii encoded strings
  sCmd.addCommand("INFO?", getInfo); 

  sCmd.setDefaultHandler(unrecognized); 


  // temperature
  // <F> float as string 

  // Getter:
  //   TEMP? 
  // Returns: <F> 
  sCmd.addCommand("TEMP?", wrapperGet_TEMP); 
}

//// Code 

void getInfo() {
  Serial.print("TemperatureSensor,");
  Serial.println(COMPILE_DATE_TIME);
}

void unrecognized(const char *command) {
  error("Unknown command");
}
//// Auto generated Feat and DictFeat Code
// COMMAND: TEMP, FEAT: temperature

void wrapperGet_TEMP() { 
  Serial.println(get_TEMP()); 
}; 



